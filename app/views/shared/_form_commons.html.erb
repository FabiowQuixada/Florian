<% hide_audit ||= false %>

<!-- Edited but not saved modal -->
<div class="modal fade" id="confirm_back_modal" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="modal-dialog modal-sm">
		<div class="modal-content">
			<div class="modal-header">
				<%= t('modal.title.back') %>
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">
					&times;
				</button>
			</div>
			<div class="modal-body">
				<%= t('modal.body.back') %>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-primary" data-dismiss="modal">
					<%= t('helpers.action.cancel') %>
				</button>

				<a class="btn btn-primary" id="modal_back_btn"><%= t('helpers.action.discard') %></a>
				<a class="btn btn-primary" id="modal_confirm_btn"><%= t('helpers.action.update_data') %></a>
			</div>
		</div>
	</div>
</div>

<%= render 'shared/audit_commons' unless hide_audit %>

<script>

	let any_change = false;
	
	<% if @model.persisted? %>

	    let attr_values = new Array();

		$(() => {

			const button = elem => elem.hasClass('btn')
			const temp_field = elem => elem.hasClass('temp_field')
			const hidden_field = elem => elem.attr('type') !== 'hidden'
			const status_attr = elem => elem.attr('id') === 'model_status'
			const has_id = elem => typeof elem.attr('id') !== 'undefined'

			// Saves the values of the model on page load, so it can be compared to the values when the user goes back, allowing a 'not-saved data' pop-up to display;
			attr_values = new Array();
			$('input, textarea, select').each((i, field) => {
				const elem = $(field);
				if(!button(elem) && has_id(elem) && !temp_field(elem) && (status_attr(elem) || hidden_field(elem)))
					attr_values[$(field).attr('id')] = $(field).val();
			})

			$('#form_back_btn').on('click', handle_back_on_edit);
		});

		const has_changed = key => {
			if($(`#${key}`).hasClass("numbers_only") && attr_values[key] === "" && $(`#${key}`).val() === "0")
				return false;

			return attr_values[key] != $(`#${key}`).val();
		}

		const handle_back_on_edit = () => {

			any_change = false;

			preprocess_data();

			let changed_values_list = "";

			if(!any_change) {
				for (let key in attr_values) {
					if(has_changed(key)) {
						changed_values_list += `' ${key}`;
						any_change = true;
					}
				}
			}

			if(any_change) {
				$('#confirm_back_modal').modal('show');
				$('#modal_back_btn').on('click', () => go_back());
			} else {
				go_back();
			}
		}

	<% else %>

		$(document).ready( () => {
			$('.back_btn').on('click', () => go_back());
		});

	<% end %>

	$('#modal_confirm_btn').on('click', () => {
		document.getElementById("main_form").submit();
	});

	const display_form_errors = message => {
		let result = '';

		if (Object.prototype.toString.call(message) === '[object Array]') {
			result = msg_as_html_ul(message);
		} else {
			result = message;
		}

		hide_all_messages();
		to_top();
		$('#form_error_messages').html(result);
		$('#form_error_box').removeClass('hidden');
	}

	const add_tag_to_field = (field, tag) => {
		const caretPos = document.getElementById(field).selectionStart;
		const textAreaTxt = jQuery(`#${field}`).val();
		jQuery(`#${field}`).val(`${textAreaTxt.substring(0, caretPos)} ${tag} ${textAreaTxt.substring(caretPos)}`);
	}

	const validate_email = email => (
		/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i
        .test(email)
    )

	const go_back = () => window.location = '<%= model_full_path(@model) %>'

</script>
