<!-- Edited but not saved modal -->
<div class="modal fade" id="confirm_back_modal" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="modal-dialog modal-sm">
		<div class="modal-content">
			<div class="modal-header">
				<%= t('modal.title.back') %>
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">
					&times;
				</button>
			</div>
			<div class="modal-body">
				<%= t('modal.body.back') %>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-primary" data-dismiss="modal">
					<%= t('helpers.action.cancel') %>
				</button>

				<a class="btn btn-primary" id="modal_back_btn"><%= t('helpers.action.discard') %></a>
				<a class="btn btn-primary" id="modal_confirm_btn"><%= t('helpers.action.update_data') %></a>
			</div>
		</div>
	</div>
</div>

<%= render partial: "shared/audit_commons", locals: {model: model} %>

<script>
	<% if model.persisted? %>
		$(document).ready(function() {

			jQuery(document).ready(function($) {

				$("#remove_company_form").on("ajax:success", function(e, data, status, xhr) {
					display_notice('<%= t('alert.email.test_sent') %>');
					$('#remove_company_modal').modal('hide');

				}).on("ajax:error", function(e, xhr, status, error) {
					display_error('<%= t('alert.email.error_sending_test') %>');
					$('#remove_company_modal').modal('hide');
				});
			});


			// Saves the values of the model on page load, so it can be compared to the values when the user goes back, allowing a 'not-saved data' pop-up to display;
			window.attr_values = new Array();
			$('input, textarea, select').each(function(){
				if(!$(this).hasClass('btn') && !(typeof $(this).attr('id') === 'undefined') && !$(this).hasClass('temp_field') && $(this).attr('type') !== 'hidden')
			   		attr_values[$(this).attr('id')] = $(this).val();
			})

			$('#form_back_btn').on('click', handle_back_on_edit);

			<% if model.class.column_names.include? 'active' %>

				if(<%= model.active? %>) {
					activate();
				}
				else {
					inactivate();
				}

			<% end %>
		});

		function has_changed(key) {

			if($('#' + key).hasClass("numbers_only") && attr_values[key] === "" && $('#' + key).val() === "0")
				return false;


			return attr_values[key] != $('#' + key).val();
		}

		function handle_back_on_edit() {

			window.any_change = false;

			preprocess_data();

			var changed_values_list = "";

			if(!window.any_change) {
				for (var key in attr_values) {
				    if(has_changed(key)) {
				    	changed_values_list += ' ' + key;
				    	any_change = true;
				    }
				}
			}

			//alert(changed_values_list);

			if(window.any_change) {
				$('#confirm_back_modal').modal('show');
				$('#modal_back_btn').on('click', function() {
					go_back();
				});
			} else {
				go_back();
			}
		}

		// window.onload = function (e) {
		//     if (typeof history.pushState === "function") {
		//         history.pushState("jibberish", null, null);
		//         window.onpopstate = function () {
		//             //history.pushState('newjibberish', null, null);
		//             e.preventDefault();
		//             handle_back_on_edit();
		//             // Handle the back (or forward) buttons here
		//             // Will NOT handle refresh, use onbeforeunload for this.
		//         };
		//     }
		//     else {
		//         var ignoreHashChange = true;
		//         window.onhashchange = function () {
		//             if (!ignoreHashChange) {
		//                 ignoreHashChange = true;
		//                 window.location.hash = Math.random();
		//                 // Detect and redirect change here
		//                 // Works in older FF and IE9
		//                 // * it does mess with your hash symbol (anchor?) pound sign
		//                 // delimiter on the end of the URL
		//             }
		//             else {
		//                 ignoreHashChange = false;
		//             }
		//         };
		//     }
		// }

	<% else %>

		$(document).ready(function() {
			<% if model.class.column_names.include? 'active' %>
				activate();
			<% end %>

			$('.back_btn').on('click', function() {
				go_back();
			});
		});

	<% end %>

	$('#modal_confirm_btn').on('click', function() {
		document.getElementById("main_form").submit();
	});

	function display_form_errors(message) {
		var result = '';

		if (Object.prototype.toString.call(message) === '[object Array]')
		{
			result += '<ul>';

			for (var i = 0; i < message.length; i++)
				result += '<li>' + message[i] + '</li>';

			result += '</ul>';
		} else {
			result = message;
		}

		hide_all_messages();
		to_top();
		$('#form_error_messages').html(result);
		$('#form_error_box').show();
	}

	<% if model.class.column_names.include? 'active' %>

		function inactivate() {
			$('#active_img').hide();
			$('#inactive_img').show();
			$('#model_status').val('false');
			$('#status_description').text('<%= genderize_tag(model, 'helpers.is_inactive') %>');
		}

		function activate() {
			$('#active_img').show();
			$('#inactive_img').hide();
			$('#model_status').val('true');
			$('#status_description').text('<%= genderize_tag(model, 'helpers.is_active') %>');
		}

		$('.status_btn').on('click', set_status_btn);

		function set_status_btn() {
			if($('#model_status').val() == 'true') {
				inactivate();
			}
			else {
				activate();
			}
		}

	<% end %>

    function add_tag_to_field(field, tag) {
        var caretPos = document.getElementById(field).selectionStart;
        var textAreaTxt = jQuery("#" + field).val();
        jQuery("#" + field).val(textAreaTxt.substring(0, caretPos) + ' ' + tag + ' ' + textAreaTxt.substring(caretPos) );
     }

     function go_back() {
     	window.location = '/<%= model.model_name.route_key %>';
     }

</script>