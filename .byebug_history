c
num
c
errors.add(:water, I18n.t('errors.messages.blank', attribute: water))
num.nil? || num == ''
num
c
num
c
num
c
num
c
num
c
n
num
c
month_data[bill].gsub('.', '').gsub(',', '.')
month_data[bill].class
month_data[bill].to_i.to_s
month_data[bill]
c
month_data
c
year_data
month_data
month_data[bill]
c
month_data[bill]
c
@model.water
@model
c
I18n.localize(iterator.competence, format: :competence).capitalize
iterator.competence.month
iterator.competence
c
request.env['HTTP_ACCEPT_LANGUAGE'].split(',')[0]
request.env['HTTP_ACCEPT_LANGUAGE'].split(',')
request.env['HTTP_ACCEPT_LANGUAGE']
c
request.env['HTTP_ACCEPT_LANGUAGE']
request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}/).first
extract_locale_from_accept_language_header
c
a.value.valor
a.value
a.value.valor
a.value
a = Donation.new(donation_params)
Donation.new(donation_params)
params
c
rendered
c
dependent_objects
c
expected_body
c
"(#{value.real.por_extenso})"
"(value.real.por_extenso})"
"(#{Dinheiro.new(value).real.por_extenso})"
"#{ActionController::Base.helpers.number_to_currency(value)}"
"#{ActionController::Base.helpers.number_to_currency(value)} (#{Dinheiro.new(value).real.por_extenso})"
value.real.por_extenso
value.real
value
c
guest_role
c
"%.2f" % 1.5
number_with_precision(3.0, :precision => 2)
number_with_precision(3, :precision => 2)
new_value
c
self
new_value
c
new_value == 0.0
new_value = 0.0
new_value = 0
new_value = 0.00
new_value
c
new_value
c
new_value
c
new_value
aaa
c
aaa.gsub('.', '').gsub(',', '')
c
aaa
c
aaa
c
a.value.to_s
a.value
a = Donation.new(donation_params)
c
a.value.to_s
a.value
a = Donation.new(donation_params)
donation_params
c
donation_params
c
donation_params
c
pp params
c
pp params
pp prams
c
link_to image_tag('deactivate.png', title: genderize_tag(iterator, 'is_inactive'), class: 'activate_btn status_btn'), activate_path, method: :post, remote: true, id: 'change_status_' + iterator.id.to_s, 'data-type' => :json, class: 'activate_btn'
c
n
send("activate_#{iterator.class.to_s.underscore}_path", iterator)
c
pp params
c
pp params
c
pp params
c
pp params
c
pp params
c
pp params
c
pp params
c
pp params
c
pp params
c
form.object.product_and_service_week
form.object
form
c
pp params
c
pp params
c
n
c
n
c
n
c
c 
c
service_type
service_type.nil? || service_type.blank?
c
service_type.nil? || service_type.blank?
c
errors
I18n.t('errors.messages.blank', attribute: I18n.t('activerecord.attributes.service_datum.service_type'))
n
service_type.nil? || service_type.blank?
 unless service_type.nil? || service_type.blank?
service_type
c
pp params[:product_and_service_datum][:product_and_service_weeks_attributes]
pp params[:product_and_service_datum][:product_and_service_weeks_attributes][0]
pp params[:product_and_service_datum][:product_and_service_weeks_attributes][:0]
clear
pp params[:product_and_service_datum][:product_and_service_weeks_attributes][:0]
pp params[:product_and_service_datum][:product_and_service_weeks_attributes][0]
pp params[:product_and_service_datum][:product_and_service_weeks_attributes]
pp params
c
pp params[:product_and_service_datum][:product_and_service_weeks_attributes]
pp params[:product_and_service_datum][:product_and_service_weeks_attributes][0]
pp params
c
pp params
c
serv_form.object
c
contact.send(:name)
contact.send('name')
contact.send(name)
contact.name
contact
c
self
slef
Bill.where("extract(month from competence) = #{competence.month} AND extract(year from competence) = #{competence.year} " + ( id ? "AND id != #{id}" : "" )).any?
=> 44:     ( id ? "AND id != #{id}" : "" )).any?
   43:     AND extract(year from competence) = #{competence.year} " +
Bill.where("extract(month from competence) = #{competence.month} 
c
n
errors.add(:competence, I18n.t('errors.messages.taken', attribute: attribute))
:competence
Bill.where("extract(month from competence) = #{competence.month} AND extract(year from competence) = #{competence.year} " + ( id ? "AND id != #{id}" : "" )).any?
"#{competence.month}"
c
"#{competence.month}"
s
n
c
"#{competence.month}"
s
n
c
"#{competence.month}"
competence
s
n
competence
c
paginate @list
@list
c
Dir["#{Rails.root}/backups/db_backup/*"].sort.reverse[1]
Dir["#{Rails.root}/backups/db_backup/*"].sort.reverse
Dir["#{Rails.root}/backups/db_backup/*"].sort.reverse[1]
Dir[Rails.root.to_s + '/backups/db_backup/*'].sort.reverse[1]
Dir[Rails.root_to_s + '/backups/db_backup/*'].sort.reverse[1]
c
rendered
c
response.url
response
c
new_line
c
new_line
c
lala
new_line
c
lala[0]
lala
c
lala
c
lala
c
_f.methods
_f.content
_f
c
response.status
response.body
response
n
@module
n
s
