c
pp params
c
pp params
pp prams
c
link_to image_tag('deactivate.png', title: genderize_tag(iterator, 'is_inactive'), class: 'activate_btn status_btn'), activate_path, method: :post, remote: true, id: 'change_status_' + iterator.id.to_s, 'data-type' => :json, class: 'activate_btn'
c
n
send("activate_#{iterator.class.to_s.underscore}_path", iterator)
c
pp params
c
pp params
c
pp params
c
pp params
c
pp params
c
pp params
c
pp params
c
pp params
c
pp params
c
form.object.product_and_service_week
form.object
form
c
pp params
c
pp params
c
n
c
n
c
n
c
c 
c
service_type
service_type.nil? || service_type.blank?
c
service_type.nil? || service_type.blank?
c
errors
I18n.t('errors.messages.blank', attribute: I18n.t('activerecord.attributes.service_datum.service_type'))
n
service_type.nil? || service_type.blank?
 unless service_type.nil? || service_type.blank?
service_type
c
pp params[:product_and_service_datum][:product_and_service_weeks_attributes]
pp params[:product_and_service_datum][:product_and_service_weeks_attributes][0]
pp params[:product_and_service_datum][:product_and_service_weeks_attributes][:0]
clear
pp params[:product_and_service_datum][:product_and_service_weeks_attributes][:0]
pp params[:product_and_service_datum][:product_and_service_weeks_attributes][0]
pp params[:product_and_service_datum][:product_and_service_weeks_attributes]
pp params
c
pp params[:product_and_service_datum][:product_and_service_weeks_attributes]
pp params[:product_and_service_datum][:product_and_service_weeks_attributes][0]
pp params
c
pp params
c
serv_form.object
c
contact.send(:name)
contact.send('name')
contact.send(name)
contact.name
contact
c
self
slef
Bill.where("extract(month from competence) = #{competence.month} AND extract(year from competence) = #{competence.year} " + ( id ? "AND id != #{id}" : "" )).any?
=> 44:     ( id ? "AND id != #{id}" : "" )).any?
   43:     AND extract(year from competence) = #{competence.year} " +
Bill.where("extract(month from competence) = #{competence.month} 
c
n
errors.add(:competence, I18n.t('errors.messages.taken', attribute: attribute))
:competence
Bill.where("extract(month from competence) = #{competence.month} AND extract(year from competence) = #{competence.year} " + ( id ? "AND id != #{id}" : "" )).any?
"#{competence.month}"
c
"#{competence.month}"
s
n
c
"#{competence.month}"
s
n
c
"#{competence.month}"
competence
s
n
competence
c
paginate @list
@list
c
Dir["#{Rails.root}/backups/db_backup/*"].sort.reverse[1]
Dir["#{Rails.root}/backups/db_backup/*"].sort.reverse
Dir["#{Rails.root}/backups/db_backup/*"].sort.reverse[1]
Dir[Rails.root.to_s + '/backups/db_backup/*'].sort.reverse[1]
Dir[Rails.root_to_s + '/backups/db_backup/*'].sort.reverse[1]
c
rendered
c
response.url
response
c
new_line
c
new_line
c
lala
new_line
c
lala[0]
lala
c
lala
c
lala
c
_f.methods
_f.content
_f
c
response.status
response.body
response
n
@module
n
s
c
response.body
response
n
s
c
response.body
c
Role.last
Role.first
Roel.first
response.body
c
params
c
model_class.model_name.singular_route_key + '_params'
c
self.class.name[0..-11].singularize
self.class.name[0..-11]
self.class.name[0..-12]
c
Object.const_get self.class.name[0..-12]
self.class.name[0..-12]
self.class.name[0..-11]
Object.const_get self.class.name[0..-11]
send(self.class.name[0..-11])
self.class.name[0..-11]
self.class.name[0..-10]
self.class
self.class.name
c
self.class.name
c
self.class.name
self.class
included
methods
c
@@model_class.model_name.singular_route_key
@@model_class.route_key
@@model_class.model_name
@@model_class.name.plural
@@model_class.name
@@model_class
c
n
c
@model.breadcrumb_path.merge Hash[t(@model.genderize('helpers.action.new')) => '']
n
@model.breadcrumb_path.merge Hash[t(@model.genderize('helpers.action.new')) => '']
c
@model.breadcrumb_path.merge Hash[t(@model.genderize('helpers.action.new')) => '']
n
@@model_class
c
lala
c
lala
c
n
lala
c
model_class
c
fields
c
params
c
params
c
params
c
params
c
params
c
db_backup_files
c
db_backup_files
c
jobs
c
n
c
bundle exec backup perform --trigger db_backup
bundle exec backup perform --trigger my_backup
backup perform --trigger my_backup
backup perform -t db_backup --data-path /home/fabiow/Desktop/Florian/backups/
backup perform -t db_backup --data-path ' + RAILS_ROOT + '/backups/
RAILS_ROOT
c
jobs[0][:runner_command]
jobs
jobs[0][:task]
jobs[0]
c
db_backup_files.sort.reverse[0]
db_backup_files.sort
db_backup_files
db_backup_files.sort.reverse[1]
c
e
n
c
db_backup_files
c
db_backup_files
c
db_backup_files.any?
c
